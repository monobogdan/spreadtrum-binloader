Архитектура бинлоадера

Принцип работы программы очень простой. По своей сути, он перехватывает (подменяет) функцию для обработки сообщений от любого окна в MMI, загружает внешний бинарник (в нашем случае это libruntime.so с диска E:/Exe/) и затем перенаправляет все сообщения загруженному рантайму. В текущем виде, бинлоадер перехватывает окно игры Сокобан, которая встроена во многие телефоны на чипсетах Spreadtrum и остаётся достаточно компактным, чтобы поместится в размеры оригинальной функции HandleBoxManWinMsg.

У бинлоадера есть небольшая таблица функций, которая содержит в себе аллокатор и функции для работы с файлами. Указатели на функции автоматически ищутся скриптом PrepareFunctionTable.cs и затем записываются в отдельный инклуд.

Система сборки

Сборка происходит в три шага: формирование таблицы функций по паттернам и поиск функции для хука в FullFlash, сборка бинлоадера для адреса подменяемой функции с помощью программы make и вшитие бинлоадера с помощью скрипта EmbedInFull.cs

Далее полученный файл patched.bin необходимо прошить с помощью ResearchDownload и если все паттерны верны - все заработает как и должно.


Зачем нужен libruntime.so? Не проще добавить функции в конец прошивки?

Проблемы две:
1. На устройствах с SC6531 флэш-памяти установлено впритык и ко всему прочему, большая часть кода запакована.
2. Нет нормального дебаггера. Если что-то крашится, телефон приходится перепрошивать, а это занимает около 250 секунд. В случае встроенного бинлоадера телефон достаточно один раз прошить и далее просто подменять libruntime.so на флэшке для отладки изменений.
